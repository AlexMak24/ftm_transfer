import pandas as pd
import requests
import time
from datetime import datetime


TARGET_WALLETS = [
    "0x1fa63a80d5f3b7b092e6b70dce5beba996a92fa6".lower(),
    "0x90210001ffdc5c90645c347a583922c1b9fe8e44".lower()
]

NETWORKS = {
    "arbitrum": {
        "explorer": "https://api.arbiscan.io/api",
        "api_key": "EGS2QWPD9G4DED41FZDYGP6XW6SI3JSJ5F",
        "native_token": "ARB"
    },
    "optimism": {
        "explorer": "https://api-optimistic.etherscan.io/api",
        "api_key": "TNM2RBE4NAZ3CTFC2NX2U2SEUNQQTXG66R",
        "native_token": "OP"
    },
    "fantom": {
        "explorer": "https://api.ftmscan.com/api",
        "api_key": "YOUR_FTMSCAN_API_KEY",
        "native_token": "FTM"
    },
    "base": {
        "explorer": "https://api.basescan.org/api",
        "api_key": "7K4BV9AUPWX9ZRSDYJ29QNI9MWI3M7PIZI",
        "native_token": "ETH"
    },
    "ethereum": {
        "explorer": "https://api.etherscan.io/api",
        "api_key": "15FYRR5CE2WABHFKIZ4VSEZCHVZSINDKMZ",
        "native_token": "ETH"
    },
    "polygon": {
        "explorer": "https://api.polygonscan.com/api",
        "api_key": "BMWIQ6ZY1GAW48SV5AX1USGBS1G99JQBXB",
        "native_token": "MATIC"
    },
    "bnb": {
        "explorer": "https://api.bscscan.com/api",
        "api_key": "ZUSGFQDS9D9FF26Q2YAD356BKS3T24PES2",
        "native_token": "BNB"
    }
}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–µ—Ç–∏
def check_transactions(network, wallet_address):
    interactions = []
    base_url = NETWORKS[network]["explorer"]
    api_key = NETWORKS[network]["api_key"]
    native_token = NETWORKS[network]["native_token"]

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    params = {
        "module": "",
        "action": "",
        "address": wallet_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "desc",
        "apikey": api_key
    }

    # –û–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    try:
        params["module"] = "account"
        params["action"] = "txlist"
        print(f"‚ÑπÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {wallet_address} –≤ {network.capitalize()}")
        response = requests.get(base_url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if data["status"] != "1":
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {network.capitalize()}: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return interactions

        for tx in data["result"]:
            tx_from = tx["from"].lower()
            tx_to = tx["to"].lower() if tx["to"] else ""
            if tx_from in TARGET_WALLETS or tx_to in TARGET_WALLETS:
                value = int(tx["value"]) / 1e18
                interactions.append({
                    "hash": tx["hash"],
                    "from": tx_from,
                    "to": tx_to,
                    "value": value,
                    "timestamp": datetime.fromtimestamp(int(tx["timeStamp"])),
                    "network": network,
                    "type": "transaction",
                    "token": native_token
                })
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ {network.capitalize()}: {str(e)}")

    # ERC-20 —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã
    try:
        params["module"] = "account"
        params["action"] = "tokentx"
        print(f"‚ÑπÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ERC-20 —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –¥–ª—è {wallet_address} –≤ {network.capitalize()}")
        response = requests.get(base_url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if data["status"] != "1":
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {network.capitalize()}: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return interactions

        for tx in data["result"]:
            tx_from = tx["from"].lower()
            tx_to = tx["to"].lower()
            if tx_from in TARGET_WALLETS or tx_to in TARGET_WALLETS:
                interactions.append({
                    "hash": tx["hash"],
                    "from": tx_from,
                    "to": tx_to,
                    "value": float(tx["value"]) / (10 ** int(tx["tokenDecimal"])),
                    "timestamp": datetime.fromtimestamp(int(tx["timeStamp"])),
                    "network": network,
                    "type": "erc20",
                    "token": tx["tokenSymbol"]
                })
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ERC-20 –≤ {network.capitalize()}: {str(e)}")

    # ERC-721 —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã
    try:
        params["module"] = "account"
        params["action"] = "tokennfttx"
        print(f"‚ÑπÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ERC-721 —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –¥–ª—è {wallet_address} –≤ {network.capitalize()}")
        response = requests.get(base_url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if data["status"] != "1":
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API {network.capitalize()}: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return interactions

        for tx in data["result"]:
            tx_from = tx["from"].lower()
            tx_to = tx["to"].lower()
            if tx_from in TARGET_WALLETS or tx_to in TARGET_WALLETS:
                interactions.append({
                    "hash": tx["hash"],
                    "from": tx_from,
                    "to": tx_to,
                    "token_id": tx["tokenID"],
                    "timestamp": datetime.fromtimestamp(int(tx["timeStamp"])),
                    "network": network,
                    "type": "nft",
                    "token": tx["tokenName"]
                })
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ERC-721 –≤ {network.capitalize()}: {str(e)}")

    return interactions


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def process_wallets(excel_file="wallets.xlsx"):
    try:
        df = pd.read_excel(excel_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {excel_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
        return

    required_columns = ["Address"]
    if not all(col in df.columns for col in required_columns):
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {required_columns}")
        return

    # –°–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
    matched_wallets = []

    for index, row in df.iterrows():
        wallet_address = str(row["Address"]).strip().lower()
        print(f"\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ {index + 1} ===")
        print(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–Ω—ã–π
        if not wallet_address.startswith("0x") or len(wallet_address) != 42:
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {wallet_address}")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        total_interactions = 0
        for network in NETWORKS.keys():
            print(f"\n‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ {network.capitalize()}...")
            interactions = check_transactions(network, wallet_address)

            if interactions:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(interactions)} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:")
                for i, interaction in enumerate(interactions, 1):
                    print(f"  {i}. –•—ç—à: {interaction['hash']}")
                    print(f"     –û—Ç: {interaction['from']}")
                    print(f"     –ö–æ–º—É: {interaction['to']}")
                    if interaction["type"] == "transaction":
                        print(f"     –ó–Ω–∞—á–µ–Ω–∏–µ: {interaction['value']} {interaction['token']}")
                    elif interaction["type"] == "erc20":
                        print(f"     –¢–æ–∫–µ–Ω: {interaction['token']} ({interaction['value']})")
                    elif interaction["type"] == "nft":
                        print(f"     NFT: {interaction['token']} (ID: {interaction['token_id']})")
                    print(f"     –í—Ä–µ–º—è: {interaction['timestamp']}")
                total_interactions += len(interactions)
            else:
                print(f"‚ÑπÔ∏è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ API
            time.sleep(0.2)

        print(f"\nüìä –ò—Ç–æ–≥ –¥–ª—è {wallet_address}: {total_interactions} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª—ë–∫ –≤ —Å–ø–∏—Å–æ–∫
        if total_interactions > 0:
            matched_wallets.append({
                "Address": wallet_address,
                "InteractionCount": total_interactions
            })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–æ—à–µ–ª—å–∫–∏ –≤ —Ñ–∞–π–ª
    if matched_wallets:
        matched_df = pd.DataFrame(matched_wallets)
        output_file = "matched_wallets.xlsx"
        matched_df.to_excel(output_file, index=False)
        print(f"\n‚úÖ –°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–æ—à–µ–ª—å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    else:
        print("\n‚ÑπÔ∏è –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    print("\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")


if __name__ == "__main__":
    process_wallets("wallets.xlsx")
